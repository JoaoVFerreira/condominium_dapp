/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Condominium, CondominiumInterface } from "../Condominium";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "residenceNumber",
        type: "uint16",
      },
    ],
    name: "addResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "counselors",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
    ],
    name: "isResident",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "manager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
    ],
    name: "removeResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "residence",
        type: "uint16",
      },
    ],
    name: "residenceExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "residences",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "residents",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isEntering",
        type: "bool",
      },
    ],
    name: "setCounselor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "setManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600190505b60028160ff161162000114576000600190505b60058161ffff1611620000fd576000600190505b60058160ff1611620000e65760018060008360ff16606486026103e88860ff1602010161ffff1661ffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620000dd9062000157565b91505062000080565b508080620000f49062000193565b9150506200006c565b5080806200010b9062000157565b91505062000059565b50620001c2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600062000164826200014a565b915060ff82036200017a57620001796200011b565b5b600182019050919050565b600061ffff82169050919050565b6000620001a08262000185565b915061ffff8203620001b757620001b66200011b565b5b600182019050919050565b610ee280620001d26000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806396fa1def1161006657806396fa1def1461016d578063b158354614610189578063bc2f89f3146101a5578063d0ebdbe7146101d5578063e4d65d54146101f15761009e565b8063481c6a75146100a35780634de53265146100c1578063597de987146100f157806368aca3351461010d578063967d59e41461013d575b600080fd5b6100ab610221565b6040516100b891906109db565b60405180910390f35b6100db60048036038101906100d69190610a27565b610245565b6040516100e89190610a6f565b60405180910390f35b61010b60048036038101906101069190610a27565b610265565b005b61012760048036038101906101229190610a27565b610475565b6040516101349190610a6f565b60405180910390f35b61015760048036038101906101529190610ac4565b6104d2565b6040516101649190610a6f565b60405180910390f35b61018760048036038101906101829190610b1d565b610504565b005b6101a3600480360381019061019e9190610b5d565b610691565b005b6101bf60048036038101906101ba9190610ac4565b610819565b6040516101cc9190610a6f565b60405180910390f35b6101ef60048036038101906101ea9190610a27565b610839565b005b61020b60048036038101906102069190610a27565b610979565b6040516102189190610bac565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90610c4a565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037790610cb6565b60405180910390fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549061ffff0219169055600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561047257600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690555b50565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff16119050919050565b6000600160008361ffff1661ffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058990610c4a565b60405180910390fd5b801561063d576105a182610475565b6105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790610d22565b60405180910390fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061068d565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690555b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107345750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a90610db4565b60405180910390fd5b61077c816104d2565b6107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290610e20565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff1602179055505050565b60016020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108be90610c4a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092d90610e8c565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915054906101000a900461ffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109c58261099a565b9050919050565b6109d5816109ba565b82525050565b60006020820190506109f060008301846109cc565b92915050565b600080fd5b610a04816109ba565b8114610a0f57600080fd5b50565b600081359050610a21816109fb565b92915050565b600060208284031215610a3d57610a3c6109f6565b5b6000610a4b84828501610a12565b91505092915050565b60008115159050919050565b610a6981610a54565b82525050565b6000602082019050610a846000830184610a60565b92915050565b600061ffff82169050919050565b610aa181610a8a565b8114610aac57600080fd5b50565b600081359050610abe81610a98565b92915050565b600060208284031215610ada57610ad96109f6565b5b6000610ae884828501610aaf565b91505092915050565b610afa81610a54565b8114610b0557600080fd5b50565b600081359050610b1781610af1565b92915050565b60008060408385031215610b3457610b336109f6565b5b6000610b4285828601610a12565b9250506020610b5385828601610b08565b9150509250929050565b60008060408385031215610b7457610b736109f6565b5b6000610b8285828601610a12565b9250506020610b9385828601610aaf565b9150509250929050565b610ba681610a8a565b82525050565b6000602082019050610bc16000830184610b9d565b92915050565b600082825260208201905092915050565b7f4f6e6c7920746865206d616e61676572206861732061636365737320746f207460008201527f6869732066756e6374696f6e616c697479000000000000000000000000000000602082015250565b6000610c34603183610bc7565b9150610c3f82610bd8565b604082019050919050565b60006020820190508181036000830152610c6381610c27565b9050919050565b7f4120636f756e73656c6f722063616e6e6f742062652072656d6f766564000000600082015250565b6000610ca0601d83610bc7565b9150610cab82610c6a565b602082019050919050565b60006020820190508181036000830152610ccf81610c93565b9050919050565b7f54686520636f756e73656c6f72206d7573742062652061207265736964656e74600082015250565b6000610d0c602083610bc7565b9150610d1782610cd6565b602082019050919050565b60006020820190508181036000830152610d3b81610cff565b9050919050565b7f4f6e6c792074686520636f756e73656c6f7273206f72206d616e61676572206860008201527f6176652061636365737320746f20746869732066756e6374696f6e616c697479602082015250565b6000610d9e604083610bc7565b9150610da982610d42565b604082019050919050565b60006020820190508181036000830152610dcd81610d91565b9050919050565b7f54686973207265736964656e636520646f6573206e6f74206578697374730000600082015250565b6000610e0a601e83610bc7565b9150610e1582610dd4565b602082019050919050565b60006020820190508181036000830152610e3981610dfd565b9050919050565b7f5468652061646472657373206d7573742062652076616c696400000000000000600082015250565b6000610e76601983610bc7565b9150610e8182610e40565b602082019050919050565b60006020820190508181036000830152610ea581610e69565b905091905056fea2646970667358221220eabbe3a98d1d776a3320311fd311589ebd9b10d714fdd1c5d2426ffb52321d9864736f6c63430008180033";

type CondominiumConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CondominiumConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Condominium__factory extends ContractFactory {
  constructor(...args: CondominiumConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Condominium & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Condominium__factory {
    return super.connect(runner) as Condominium__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CondominiumInterface {
    return new Interface(_abi) as CondominiumInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Condominium {
    return new Contract(address, _abi, runner) as unknown as Condominium;
  }
}
