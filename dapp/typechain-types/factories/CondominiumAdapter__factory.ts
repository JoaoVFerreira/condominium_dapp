/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  CondominiumAdapter,
  CondominiumAdapterInterface,
} from "../CondominiumAdapter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "residenceNumber",
        type: "uint16",
      },
    ],
    name: "addResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "addTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "closeVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplementationAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "numberOfVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "openVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
    ],
    name: "removeResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "removeTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isEntering",
        type: "bool",
      },
    ],
    name: "setCounselor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "setManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "enum CondominiumLib.VoteOptions",
        name: "option",
        type: "uint8",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5061002b67bee1b0c77ba5bebc60c01b61007e60201b60201c565b61004567c7bcd6dcbaa7dc3660c01b61007e60201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050610081565b50565b6080516113926100a3600039600081816102aa015261067a01526113926000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638fc5dad81161008c5780639e1bf985116100665780639e1bf985146101e8578063b158354614610204578063c1e6adfd14610220578063d0ebdbe71461023c576100cf565b80638fc5dad81461019457806390ca27f3146101b057806396fa1def146101cc576100cf565b80630900f010146100d45780630cbcae70146100f05780632f9f21fe1461010e578063597de9871461013e5780637b57ee491461015a5780638da5cb5b14610176575b600080fd5b6100ee60048036038101906100e99190610ca3565b610258565b005b6100f86103a1565b6040516101059190610cdf565b60405180910390f35b61012860048036038101906101239190610e40565b610405565b6040516101359190610ea2565b60405180910390f35b61015860048036038101906101539190610ca3565b6104e4565b005b610174600480360381019061016f9190610e40565b6105ae565b005b61017e610678565b60405161018b9190610cdf565b60405180910390f35b6101ae60048036038101906101a99190610e40565b61069c565b005b6101ca60048036038101906101c59190610ee2565b610766565b005b6101e660048036038101906101e19190610f76565b610833565b005b61020260048036038101906101fd9190610e40565b610900565b005b61021e60048036038101906102199190610ff0565b6109ca565b005b61023a60048036038101906102359190611030565b610a97565b005b61025660048036038101906102519190610ca3565b610b64565b005b61026c678b2edaec812a66f960c01b610c2e565b61028067899a1cdc411c346760c01b610c2e565b61029467866e1d9051d0338860c01b610c2e565b6102a867b3509c423ba6ef2f60c01b610c2e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032d90611105565b60405180910390fd5b61034a678e092da7d43a6d4e60c01b610c2e565b61035e67dd3ac08d00e28f7e60c01b610c2e565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006103b7670eb505460ab111ca60c01b610c2e565b6103cb674f54b4209b8cfd4560c01b610c2e565b6103df6751beb3705c127ae860c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061041b67ecd2c5ca205c0d1160c01b610c2e565b61042f671f9ac9e0ccdf74c160c01b610c2e565b61044367251a634c649906ea60c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f9f21fe836040518263ffffffff1660e01b815260040161049c9190611193565b602060405180830381865afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd91906111e1565b9050919050565b6104f867560308a97eb8436960c01b610c2e565b61050c675ffde19d2602a6a560c01b610c2e565b610520678e7e039d840f5bc960c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663597de987826040518263ffffffff1660e01b81526004016105799190610cdf565b600060405180830381600087803b15801561059357600080fd5b505af11580156105a7573d6000803e3d6000fd5b5050505050565b6105c2671b575a9d7a1a05a460c01b610c2e565b6105d667a0a46cbdb04e913260c01b610c2e565b6105ea675f2b6089d5e6d2f460c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b57ee49826040518263ffffffff1660e01b81526004016106439190611193565b600060405180830381600087803b15801561065d57600080fd5b505af1158015610671573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106b067454d94e752ab30df60c01b610c2e565b6106c467701e0be04ad2a93060c01b610c2e565b6106d8673f64b5b72c2980df60c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fc5dad8826040518263ffffffff1660e01b81526004016107319190611193565b600060405180830381600087803b15801561074b57600080fd5b505af115801561075f573d6000803e3d6000fd5b5050505050565b61077a67a285151c176142c060c01b610c2e565b61078e67d8030f07f1d96cb660c01b610c2e565b6107a2676a368c4282e52ab360c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390ca27f383836040518363ffffffff1660e01b81526004016107fd929190611285565b600060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b505050505050565b6108476743f6ce7c43f3f15a60c01b610c2e565b61085b67d0cafc4123bebb3960c01b610c2e565b61086f6719ae800ba14d1d7460c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396fa1def83836040518363ffffffff1660e01b81526004016108ca9291906112c4565b600060405180830381600087803b1580156108e457600080fd5b505af11580156108f8573d6000803e3d6000fd5b505050505050565b61091467ff21cd07dbc8af2360c01b610c2e565b610928673018f6418ad2347560c01b610c2e565b61093c6776aa43a255ab256b60c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e1bf985826040518263ffffffff1660e01b81526004016109959190611193565b600060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b5050505050565b6109de672bd8f9df7ef87dd360c01b610c2e565b6109f267b44a4eb7290ef37260c01b610c2e565b610a0667d955e54db1aaa34860c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b158354683836040518363ffffffff1660e01b8152600401610a619291906112fc565b600060405180830381600087803b158015610a7b57600080fd5b505af1158015610a8f573d6000803e3d6000fd5b505050505050565b610aab6778fcdc7a7c7e98bd60c01b610c2e565b610abf67df355b444b8e1bde60c01b610c2e565b610ad36762b18ed3ce81b2c360c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1e6adfd83836040518363ffffffff1660e01b8152600401610b2e929190611325565b600060405180830381600087803b158015610b4857600080fd5b505af1158015610b5c573d6000803e3d6000fd5b505050505050565b610b7867cba7f625eacdc4c160c01b610c2e565b610b8c67b9aaf50ce5a5542360c01b610c2e565b610ba067f4215b055c9e7d4a60c01b610c2e565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0ebdbe7826040518263ffffffff1660e01b8152600401610bf99190610cdf565b600060405180830381600087803b158015610c1357600080fd5b505af1158015610c27573d6000803e3d6000fd5b5050505050565b50565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c7082610c45565b9050919050565b610c8081610c65565b8114610c8b57600080fd5b50565b600081359050610c9d81610c77565b92915050565b600060208284031215610cb957610cb8610c3b565b5b6000610cc784828501610c8e565b91505092915050565b610cd981610c65565b82525050565b6000602082019050610cf46000830184610cd0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d4d82610d04565b810181811067ffffffffffffffff82111715610d6c57610d6b610d15565b5b80604052505050565b6000610d7f610c31565b9050610d8b8282610d44565b919050565b600067ffffffffffffffff821115610dab57610daa610d15565b5b610db482610d04565b9050602081019050919050565b82818337600083830152505050565b6000610de3610dde84610d90565b610d75565b905082815260208101848484011115610dff57610dfe610cff565b5b610e0a848285610dc1565b509392505050565b600082601f830112610e2757610e26610cfa565b5b8135610e37848260208601610dd0565b91505092915050565b600060208284031215610e5657610e55610c3b565b5b600082013567ffffffffffffffff811115610e7457610e73610c40565b5b610e8084828501610e12565b91505092915050565b6000819050919050565b610e9c81610e89565b82525050565b6000602082019050610eb76000830184610e93565b92915050565b60048110610eca57600080fd5b50565b600081359050610edc81610ebd565b92915050565b60008060408385031215610ef957610ef8610c3b565b5b600083013567ffffffffffffffff811115610f1757610f16610c40565b5b610f2385828601610e12565b9250506020610f3485828601610ecd565b9150509250929050565b60008115159050919050565b610f5381610f3e565b8114610f5e57600080fd5b50565b600081359050610f7081610f4a565b92915050565b60008060408385031215610f8d57610f8c610c3b565b5b6000610f9b85828601610c8e565b9250506020610fac85828601610f61565b9150509250929050565b600061ffff82169050919050565b610fcd81610fb6565b8114610fd857600080fd5b50565b600081359050610fea81610fc4565b92915050565b6000806040838503121561100757611006610c3b565b5b600061101585828601610c8e565b925050602061102685828601610fdb565b9150509250929050565b6000806040838503121561104757611046610c3b565b5b600083013567ffffffffffffffff81111561106557611064610c40565b5b61107185828601610e12565b925050602083013567ffffffffffffffff81111561109257611091610c40565b5b61109e85828601610e12565b9150509250929050565b600082825260208201905092915050565b7f596f7520646f206e6f742068617665207065726d697373696f6e000000000000600082015250565b60006110ef601a836110a8565b91506110fa826110b9565b602082019050919050565b6000602082019050818103600083015261111e816110e2565b9050919050565b600081519050919050565b60005b8381101561114e578082015181840152602081019050611133565b60008484015250505050565b600061116582611125565b61116f81856110a8565b935061117f818560208601611130565b61118881610d04565b840191505092915050565b600060208201905081810360008301526111ad818461115a565b905092915050565b6111be81610e89565b81146111c957600080fd5b50565b6000815190506111db816111b5565b92915050565b6000602082840312156111f7576111f6610c3b565b5b6000611205848285016111cc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061124e5761124d61120e565b5b50565b600081905061125f8261123d565b919050565b600061126f82611251565b9050919050565b61127f81611264565b82525050565b6000604082019050818103600083015261129f818561115a565b90506112ae6020830184611276565b9392505050565b6112be81610f3e565b82525050565b60006040820190506112d96000830185610cd0565b6112e660208301846112b5565b9392505050565b6112f681610fb6565b82525050565b60006040820190506113116000830185610cd0565b61131e60208301846112ed565b9392505050565b6000604082019050818103600083015261133f818561115a565b90508181036020830152611353818461115a565b9050939250505056fea26469706673582212201fa7fb7cea8e2a8b6efc90e6f0ac028d4ca25e7845c00b3ab5117c8c36f9e96364736f6c63430008180033";

type CondominiumAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CondominiumAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CondominiumAdapter__factory extends ContractFactory {
  constructor(...args: CondominiumAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CondominiumAdapter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CondominiumAdapter__factory {
    return super.connect(runner) as CondominiumAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CondominiumAdapterInterface {
    return new Interface(_abi) as CondominiumAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CondominiumAdapter {
    return new Contract(address, _abi, runner) as unknown as CondominiumAdapter;
  }
}
