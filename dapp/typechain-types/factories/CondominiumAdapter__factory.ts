/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  CondominiumAdapter,
  CondominiumAdapterInterface,
} from "../CondominiumAdapter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "residenceNumber",
        type: "uint16",
      },
    ],
    name: "addResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "addTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "closeVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "numberOfVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "openVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
    ],
    name: "removeResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "removeTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isEntering",
        type: "bool",
      },
    ],
    name: "setCounselor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "setManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "enum CondominiumLib.VoteOptions",
        name: "option",
        type: "uint8",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506080516110236100676000396000818161022101526104b201526110236000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806390ca27f31161007157806390ca27f31461017757806396fa1def146101935780639e1bf985146101af578063b1583546146101cb578063c1e6adfd146101e7578063d0ebdbe714610203576100b4565b80630900f010146100b95780632f9f21fe146100d5578063597de987146101055780637b57ee49146101215780638da5cb5b1461013d5780638fc5dad81461015b575b600080fd5b6100d360048036038101906100ce9190610934565b61021f565b005b6100ef60048036038101906100ea9190610aa7565b6102f0565b6040516100fc9190610b09565b60405180910390f35b61011f600480360381019061011a9190610934565b610394565b005b61013b60048036038101906101369190610aa7565b610422565b005b6101456104b0565b6040516101529190610b33565b60405180910390f35b61017560048036038101906101709190610aa7565b6104d4565b005b610191600480360381019061018c9190610b73565b610562565b005b6101ad60048036038101906101a89190610c07565b6105f3565b005b6101c960048036038101906101c49190610aa7565b610684565b005b6101e560048036038101906101e09190610c81565b610712565b005b61020160048036038101906101fc9190610cc1565b6107a3565b005b61021d60048036038101906102189190610934565b610834565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a490610d96565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f9f21fe836040518263ffffffff1660e01b815260040161034c9190610e24565b602060405180830381865afa158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d9190610e72565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663597de987826040518263ffffffff1660e01b81526004016103ed9190610b33565b600060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b57ee49826040518263ffffffff1660e01b815260040161047b9190610e24565b600060405180830381600087803b15801561049557600080fd5b505af11580156104a9573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fc5dad8826040518263ffffffff1660e01b815260040161052d9190610e24565b600060405180830381600087803b15801561054757600080fd5b505af115801561055b573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390ca27f383836040518363ffffffff1660e01b81526004016105bd929190610f16565b600060405180830381600087803b1580156105d757600080fd5b505af11580156105eb573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396fa1def83836040518363ffffffff1660e01b815260040161064e929190610f55565b600060405180830381600087803b15801561066857600080fd5b505af115801561067c573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e1bf985826040518263ffffffff1660e01b81526004016106dd9190610e24565b600060405180830381600087803b1580156106f757600080fd5b505af115801561070b573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b158354683836040518363ffffffff1660e01b815260040161076d929190610f8d565b600060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1e6adfd83836040518363ffffffff1660e01b81526004016107fe929190610fb6565b600060405180830381600087803b15801561081857600080fd5b505af115801561082c573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0ebdbe7826040518263ffffffff1660e01b815260040161088d9190610b33565b600060405180830381600087803b1580156108a757600080fd5b505af11580156108bb573d6000803e3d6000fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610901826108d6565b9050919050565b610911816108f6565b811461091c57600080fd5b50565b60008135905061092e81610908565b92915050565b60006020828403121561094a576109496108cc565b5b60006109588482850161091f565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109b48261096b565b810181811067ffffffffffffffff821117156109d3576109d261097c565b5b80604052505050565b60006109e66108c2565b90506109f282826109ab565b919050565b600067ffffffffffffffff821115610a1257610a1161097c565b5b610a1b8261096b565b9050602081019050919050565b82818337600083830152505050565b6000610a4a610a45846109f7565b6109dc565b905082815260208101848484011115610a6657610a65610966565b5b610a71848285610a28565b509392505050565b600082601f830112610a8e57610a8d610961565b5b8135610a9e848260208601610a37565b91505092915050565b600060208284031215610abd57610abc6108cc565b5b600082013567ffffffffffffffff811115610adb57610ada6108d1565b5b610ae784828501610a79565b91505092915050565b6000819050919050565b610b0381610af0565b82525050565b6000602082019050610b1e6000830184610afa565b92915050565b610b2d816108f6565b82525050565b6000602082019050610b486000830184610b24565b92915050565b60048110610b5b57600080fd5b50565b600081359050610b6d81610b4e565b92915050565b60008060408385031215610b8a57610b896108cc565b5b600083013567ffffffffffffffff811115610ba857610ba76108d1565b5b610bb485828601610a79565b9250506020610bc585828601610b5e565b9150509250929050565b60008115159050919050565b610be481610bcf565b8114610bef57600080fd5b50565b600081359050610c0181610bdb565b92915050565b60008060408385031215610c1e57610c1d6108cc565b5b6000610c2c8582860161091f565b9250506020610c3d85828601610bf2565b9150509250929050565b600061ffff82169050919050565b610c5e81610c47565b8114610c6957600080fd5b50565b600081359050610c7b81610c55565b92915050565b60008060408385031215610c9857610c976108cc565b5b6000610ca68582860161091f565b9250506020610cb785828601610c6c565b9150509250929050565b60008060408385031215610cd857610cd76108cc565b5b600083013567ffffffffffffffff811115610cf657610cf56108d1565b5b610d0285828601610a79565b925050602083013567ffffffffffffffff811115610d2357610d226108d1565b5b610d2f85828601610a79565b9150509250929050565b600082825260208201905092915050565b7f596f7520646f206e6f742068617665207065726d697373696f6e000000000000600082015250565b6000610d80601a83610d39565b9150610d8b82610d4a565b602082019050919050565b60006020820190508181036000830152610daf81610d73565b9050919050565b600081519050919050565b60005b83811015610ddf578082015181840152602081019050610dc4565b60008484015250505050565b6000610df682610db6565b610e008185610d39565b9350610e10818560208601610dc1565b610e198161096b565b840191505092915050565b60006020820190508181036000830152610e3e8184610deb565b905092915050565b610e4f81610af0565b8114610e5a57600080fd5b50565b600081519050610e6c81610e46565b92915050565b600060208284031215610e8857610e876108cc565b5b6000610e9684828501610e5d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610edf57610ede610e9f565b5b50565b6000819050610ef082610ece565b919050565b6000610f0082610ee2565b9050919050565b610f1081610ef5565b82525050565b60006040820190508181036000830152610f308185610deb565b9050610f3f6020830184610f07565b9392505050565b610f4f81610bcf565b82525050565b6000604082019050610f6a6000830185610b24565b610f776020830184610f46565b9392505050565b610f8781610c47565b82525050565b6000604082019050610fa26000830185610b24565b610faf6020830184610f7e565b9392505050565b60006040820190508181036000830152610fd08185610deb565b90508181036020830152610fe48184610deb565b9050939250505056fea2646970667358221220d89eec9405a5d244ea94a626ee477f9f43fd6dc8d8f5e0111d545c0e1072600264736f6c63430008180033";

type CondominiumAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CondominiumAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CondominiumAdapter__factory extends ContractFactory {
  constructor(...args: CondominiumAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CondominiumAdapter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CondominiumAdapter__factory {
    return super.connect(runner) as CondominiumAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CondominiumAdapterInterface {
    return new Interface(_abi) as CondominiumAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CondominiumAdapter {
    return new Contract(address, _abi, runner) as unknown as CondominiumAdapter;
  }
}
