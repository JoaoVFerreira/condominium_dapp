/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  CondominiumAdapter,
  CondominiumAdapterInterface,
} from "../CondominiumAdapter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "residenceNumber",
        type: "uint16",
      },
    ],
    name: "addResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "enum CondominiumLib.Category",
        name: "category",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "responsible",
        type: "address",
      },
    ],
    name: "addTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "closeVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "topicToEdit",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "responsible",
        type: "address",
      },
    ],
    name: "editTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplementationAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "openVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "residence",
        type: "uint16",
      },
    ],
    name: "payQuota",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
    ],
    name: "removeResident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "removeTopic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "resident",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isEntering",
        type: "bool",
      },
    ],
    name: "setCounselor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "enum CondominiumLib.VoteOptions",
        name: "option",
        type: "uint8",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5061002b6720994fea27dfef2b60c01b61007e60201b60201c565b610045677ce4ff74450133d760c01b61007e60201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050610081565b50565b608051612211620000a4600039600081816103250152610a7901526122116000f3fe6080604052600436106100c25760003560e01c80638fc5dad81161007f5780639e1bf985116100595780639e1bf9851461023c578063b158354614610265578063c12e80631461028e578063eaf5d9dc146102aa576100c2565b80638fc5dad8146101c157806390ca27f3146101ea57806396fa1def14610213576100c2565b80630900f010146100c75780630cbcae70146100f057806343b8c6b11461011b578063597de987146101445780637b57ee491461016d5780638da5cb5b14610196575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e991906118f2565b6102d3565b005b3480156100fc57600080fd5b5061010561041c565b604051610112919061192e565b60405180910390f35b34801561012757600080fd5b50610142600480360381019061013d9190611aea565b610480565b005b34801561015057600080fd5b5061016b600480360381019061016691906118f2565b610685565b005b34801561017957600080fd5b50610194600480360381019061018f9190611b9d565b61087e565b005b3480156101a257600080fd5b506101ab610a77565b6040516101b8919061192e565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190611b9d565b610a9b565b005b3480156101f657600080fd5b50610211600480360381019061020c9190611c0b565b610c94565b005b34801561021f57600080fd5b5061023a60048036038101906102359190611c9f565b610e90565b005b34801561024857600080fd5b50610263600480360381019061025e9190611b9d565b61108c565b005b34801561027157600080fd5b5061028c60048036038101906102879190611d19565b611285565b005b6102a860048036038101906102a39190611d59565b611481565b005b3480156102b657600080fd5b506102d160048036038101906102cc9190611d86565b61167b565b005b6102e7679fc72ee83135835860c01b61187d565b6102fb67cdad2dbbc05cc09160c01b61187d565b61030f6712c08055eb26906a60c01b61187d565b61032367a47cabcf28caa31060c01b61187d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a890611e82565b60405180910390fd5b6103c567388ae8b6cf4fd05460c01b61187d565b6103d967339ae4a87e6e0efc60c01b61187d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006104326730d936edd491b81660c01b61187d565b610446672e05985074d908b460c01b61187d565b61045a67b42ec6718454382460c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61049467d2ecf762bbebe20460c01b61187d565b6104a86729488df4290332ef60c01b61187d565b6104bc6711663758509c876360c01b61187d565b6104d0679be6677d99236da760c01b61187d565b6104e467e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a90611eee565b60405180910390fd5b61058767b1718ed807185a1460c01b61187d565b61059b67270fcbd459babb0b60c01b61187d565b6105af67481b0d89b6cc6b8a60c01b61187d565b6105c367ce8d6844b35befda60c01b61187d565b6105d767b0fec0d890ff85d960c01b61187d565b6105eb6795d9795b780672d260c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343b8c6b186868686866040518663ffffffff1660e01b815260040161064c959493929190612002565b600060405180830381600087803b15801561066657600080fd5b505af115801561067a573d6000803e3d6000fd5b505050505050505050565b610699677d52978fe4b6e8be60c01b61187d565b6106ad6729488df4290332ef60c01b61187d565b6106c16711663758509c876360c01b61187d565b6106d5679be6677d99236da760c01b61187d565b6106e967e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f90611eee565b60405180910390fd5b61078c67b1718ed807185a1460c01b61187d565b6107a067270fcbd459babb0b60c01b61187d565b6107b467495fe2847896d8e860c01b61187d565b6107c867c593fc853ac7a14960c01b61187d565b6107dc67173c42e871cf6b0f60c01b61187d565b6107f067ecf1d3dbe418182a60c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663597de987826040518263ffffffff1660e01b8152600401610849919061192e565b600060405180830381600087803b15801561086357600080fd5b505af1158015610877573d6000803e3d6000fd5b5050505050565b61089267b5f061864890878960c01b61187d565b6108a66729488df4290332ef60c01b61187d565b6108ba6711663758509c876360c01b61187d565b6108ce679be6677d99236da760c01b61187d565b6108e267e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610971576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096890611eee565b60405180910390fd5b61098567b1718ed807185a1460c01b61187d565b61099967270fcbd459babb0b60c01b61187d565b6109ad67a6fa8a57947431ae60c01b61187d565b6109c167bac910181011706060c01b61187d565b6109d5679d2ecec5bcf8435a60c01b61187d565b6109e967a8a9b5038a57a7c860c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b57ee49826040518263ffffffff1660e01b8152600401610a429190612063565b600060405180830381600087803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610aaf673f3c763d881c49b660c01b61187d565b610ac36729488df4290332ef60c01b61187d565b610ad76711663758509c876360c01b61187d565b610aeb679be6677d99236da760c01b61187d565b610aff67e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8590611eee565b60405180910390fd5b610ba267b1718ed807185a1460c01b61187d565b610bb667270fcbd459babb0b60c01b61187d565b610bca67c51bad85df59fd2960c01b61187d565b610bde6794958871fa221dbc60c01b61187d565b610bf2676971d8a67ed7141560c01b61187d565b610c06673b41ff5818fadfaa60c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fc5dad8826040518263ffffffff1660e01b8152600401610c5f9190612063565b600060405180830381600087803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b5050505050565b610ca867bb2b158f5e2737c560c01b61187d565b610cbc6729488df4290332ef60c01b61187d565b610cd06711663758509c876360c01b61187d565b610ce4679be6677d99236da760c01b61187d565b610cf867e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7e90611eee565b60405180910390fd5b610d9b67b1718ed807185a1460c01b61187d565b610daf67270fcbd459babb0b60c01b61187d565b610dc367a69790dcc25171e160c01b61187d565b610dd767d80cc2803abfef4c60c01b61187d565b610deb679fd55bb99e1a5f3360c01b61187d565b610dff67b46e6df8843f584c60c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390ca27f383836040518363ffffffff1660e01b8152600401610e5a9291906120cd565b600060405180830381600087803b158015610e7457600080fd5b505af1158015610e88573d6000803e3d6000fd5b505050505050565b610ea467741cc836ff458bb760c01b61187d565b610eb86729488df4290332ef60c01b61187d565b610ecc6711663758509c876360c01b61187d565b610ee0679be6677d99236da760c01b61187d565b610ef467e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90611eee565b60405180910390fd5b610f9767b1718ed807185a1460c01b61187d565b610fab67270fcbd459babb0b60c01b61187d565b610fbf673798e27bd9d7314e60c01b61187d565b610fd367455fb6c7376230bf60c01b61187d565b610fe7678ac09d0255a2be9a60c01b61187d565b610ffb6740564a0af032420c60c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396fa1def83836040518363ffffffff1660e01b815260040161105692919061210c565b600060405180830381600087803b15801561107057600080fd5b505af1158015611084573d6000803e3d6000fd5b505050505050565b6110a06729d8bc9adabe6de160c01b61187d565b6110b46729488df4290332ef60c01b61187d565b6110c86711663758509c876360c01b61187d565b6110dc679be6677d99236da760c01b61187d565b6110f067e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361117f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117690611eee565b60405180910390fd5b61119367b1718ed807185a1460c01b61187d565b6111a767270fcbd459babb0b60c01b61187d565b6111bb672b69a5650841efb360c01b61187d565b6111cf6742ab23bb58b997b560c01b61187d565b6111e3674e8541f42a24fc1f60c01b61187d565b6111f767fcc6c63bf7f4742760c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e1bf985826040518263ffffffff1660e01b81526004016112509190612063565b600060405180830381600087803b15801561126a57600080fd5b505af115801561127e573d6000803e3d6000fd5b5050505050565b611299678c4b77fc86fe5f4e60c01b61187d565b6112ad6729488df4290332ef60c01b61187d565b6112c16711663758509c876360c01b61187d565b6112d5679be6677d99236da760c01b61187d565b6112e967e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136f90611eee565b60405180910390fd5b61138c67b1718ed807185a1460c01b61187d565b6113a067270fcbd459babb0b60c01b61187d565b6113b467f66fc4d62e139a4260c01b61187d565b6113c867ea2e8ff52c99f27660c01b61187d565b6113dc67bf334a01cb7ae22d60c01b61187d565b6113f067548f4361e01691fc60c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b158354683836040518363ffffffff1660e01b815260040161144b929190612144565b600060405180830381600087803b15801561146557600080fd5b505af1158015611479573d6000803e3d6000fd5b505050505050565b611495678ea4fdcab5e5939660c01b61187d565b6114a96729488df4290332ef60c01b61187d565b6114bd6711663758509c876360c01b61187d565b6114d1679be6677d99236da760c01b61187d565b6114e567e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156b90611eee565b60405180910390fd5b61158867b1718ed807185a1460c01b61187d565b61159c67270fcbd459babb0b60c01b61187d565b6115b0674c42503171882ed360c01b61187d565b6115c467201e7819b1c7988a60c01b61187d565b6115d867de9d63ed78ef632d60c01b61187d565b6115ec67447ec90b07c4a11460c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c12e806334836040518363ffffffff1660e01b8152600401611646919061216d565b6000604051808303818588803b15801561165f57600080fd5b505af1158015611673573d6000803e3d6000fd5b505050505050565b61168f67985676baaa82e63160c01b61187d565b6116a36729488df4290332ef60c01b61187d565b6116b76711663758509c876360c01b61187d565b6116cb679be6677d99236da760c01b61187d565b6116df67e81789e1bdb154e560c01b61187d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361176e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176590611eee565b60405180910390fd5b61178267b1718ed807185a1460c01b61187d565b61179667270fcbd459babb0b60c01b61187d565b6117aa6766f465a8ddab0a4a60c01b61187d565b6117be67776872ece40b40e660c01b61187d565b6117d26768906dcc9eb1cb4760c01b61187d565b6117e667692ead4ce849082760c01b61187d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eaf5d9dc858585856040518563ffffffff1660e01b81526004016118459493929190612188565b600060405180830381600087803b15801561185f57600080fd5b505af1158015611873573d6000803e3d6000fd5b5050505050505050565b50565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118bf82611894565b9050919050565b6118cf816118b4565b81146118da57600080fd5b50565b6000813590506118ec816118c6565b92915050565b6000602082840312156119085761190761188a565b5b6000611916848285016118dd565b91505092915050565b611928816118b4565b82525050565b6000602082019050611943600083018461191f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61199c82611953565b810181811067ffffffffffffffff821117156119bb576119ba611964565b5b80604052505050565b60006119ce611880565b90506119da8282611993565b919050565b600067ffffffffffffffff8211156119fa576119f9611964565b5b611a0382611953565b9050602081019050919050565b82818337600083830152505050565b6000611a32611a2d846119df565b6119c4565b905082815260208101848484011115611a4e57611a4d61194e565b5b611a59848285611a10565b509392505050565b600082601f830112611a7657611a75611949565b5b8135611a86848260208601611a1f565b91505092915050565b60048110611a9c57600080fd5b50565b600081359050611aae81611a8f565b92915050565b6000819050919050565b611ac781611ab4565b8114611ad257600080fd5b50565b600081359050611ae481611abe565b92915050565b600080600080600060a08688031215611b0657611b0561188a565b5b600086013567ffffffffffffffff811115611b2457611b2361188f565b5b611b3088828901611a61565b955050602086013567ffffffffffffffff811115611b5157611b5061188f565b5b611b5d88828901611a61565b9450506040611b6e88828901611a9f565b9350506060611b7f88828901611ad5565b9250506080611b90888289016118dd565b9150509295509295909350565b600060208284031215611bb357611bb261188a565b5b600082013567ffffffffffffffff811115611bd157611bd061188f565b5b611bdd84828501611a61565b91505092915050565b60048110611bf357600080fd5b50565b600081359050611c0581611be6565b92915050565b60008060408385031215611c2257611c2161188a565b5b600083013567ffffffffffffffff811115611c4057611c3f61188f565b5b611c4c85828601611a61565b9250506020611c5d85828601611bf6565b9150509250929050565b60008115159050919050565b611c7c81611c67565b8114611c8757600080fd5b50565b600081359050611c9981611c73565b92915050565b60008060408385031215611cb657611cb561188a565b5b6000611cc4858286016118dd565b9250506020611cd585828601611c8a565b9150509250929050565b600061ffff82169050919050565b611cf681611cdf565b8114611d0157600080fd5b50565b600081359050611d1381611ced565b92915050565b60008060408385031215611d3057611d2f61188a565b5b6000611d3e858286016118dd565b9250506020611d4f85828601611d04565b9150509250929050565b600060208284031215611d6f57611d6e61188a565b5b6000611d7d84828501611d04565b91505092915050565b60008060008060808587031215611da057611d9f61188a565b5b600085013567ffffffffffffffff811115611dbe57611dbd61188f565b5b611dca87828801611a61565b945050602085013567ffffffffffffffff811115611deb57611dea61188f565b5b611df787828801611a61565b9350506040611e0887828801611ad5565b9250506060611e19878288016118dd565b91505092959194509250565b600082825260208201905092915050565b7f596f7520646f206e6f742068617665207065726d697373696f6e000000000000600082015250565b6000611e6c601a83611e25565b9150611e7782611e36565b602082019050919050565b60006020820190508181036000830152611e9b81611e5f565b9050919050565b7f596f75206d757374207570677261646520666972737400000000000000000000600082015250565b6000611ed8601683611e25565b9150611ee382611ea2565b602082019050919050565b60006020820190508181036000830152611f0781611ecb565b9050919050565b600081519050919050565b60005b83811015611f37578082015181840152602081019050611f1c565b60008484015250505050565b6000611f4e82611f0e565b611f588185611e25565b9350611f68818560208601611f19565b611f7181611953565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611fbc57611fbb611f7c565b5b50565b6000819050611fcd82611fab565b919050565b6000611fdd82611fbf565b9050919050565b611fed81611fd2565b82525050565b611ffc81611ab4565b82525050565b600060a082019050818103600083015261201c8188611f43565b905081810360208301526120308187611f43565b905061203f6040830186611fe4565b61204c6060830185611ff3565b612059608083018461191f565b9695505050505050565b6000602082019050818103600083015261207d8184611f43565b905092915050565b6004811061209657612095611f7c565b5b50565b60008190506120a782612085565b919050565b60006120b782612099565b9050919050565b6120c7816120ac565b82525050565b600060408201905081810360008301526120e78185611f43565b90506120f660208301846120be565b9392505050565b61210681611c67565b82525050565b6000604082019050612121600083018561191f565b61212e60208301846120fd565b9392505050565b61213e81611cdf565b82525050565b6000604082019050612159600083018561191f565b6121666020830184612135565b9392505050565b60006020820190506121826000830184612135565b92915050565b600060808201905081810360008301526121a28187611f43565b905081810360208301526121b68186611f43565b90506121c56040830185611ff3565b6121d2606083018461191f565b9594505050505056fea26469706673582212205c94d29819b2ecc666f85d2eda90f618bedcdf8ab913211315e5270ad960e81064736f6c63430008180033";

type CondominiumAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CondominiumAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CondominiumAdapter__factory extends ContractFactory {
  constructor(...args: CondominiumAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CondominiumAdapter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CondominiumAdapter__factory {
    return super.connect(runner) as CondominiumAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CondominiumAdapterInterface {
    return new Interface(_abi) as CondominiumAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CondominiumAdapter {
    return new Contract(address, _abi, runner) as unknown as CondominiumAdapter;
  }
}
